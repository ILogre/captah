/*
* generated by Xtext
*/
package fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.uns.i3s.rainbow.captah.dsl.services.CaPtahGrammarAccess;

public class CaPtahParser extends AbstractContentAssistParser {
	
	@Inject
	private CaPtahGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal.InternalCaPtahParser createParser() {
		fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal.InternalCaPtahParser result = new fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal.InternalCaPtahParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
					put(grammarAccess.getInstanceAccess().getAlternatives_1(), "rule__Instance__Alternatives_1");
					put(grammarAccess.getSensorTypeAccess().getAlternatives(), "rule__SensorType__Alternatives");
					put(grammarAccess.getDataEncodingAccess().getAlternatives(), "rule__DataEncoding__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
					put(grammarAccess.getSensorAccess().getGroup_3_1(), "rule__Sensor__Group_3_1__0");
					put(grammarAccess.getWidgetAccess().getGroup(), "rule__Widget__Group__0");
					put(grammarAccess.getWidgetAccess().getGroup_3_1(), "rule__Widget__Group_3_1__0");
					put(grammarAccess.getInPortAccess().getGroup(), "rule__InPort__Group__0");
					put(grammarAccess.getInPortAccess().getGroup_3_0(), "rule__InPort__Group_3_0__0");
					put(grammarAccess.getInPortAccess().getGroup_3_1(), "rule__InPort__Group_3_1__0");
					put(grammarAccess.getOutPortAccess().getGroup(), "rule__OutPort__Group__0");
					put(grammarAccess.getOutPortAccess().getGroup_1_0(), "rule__OutPort__Group_1_0__0");
					put(grammarAccess.getOutPortAccess().getGroup_1_1(), "rule__OutPort__Group_1_1__0");
					put(grammarAccess.getCompositeAccess().getGroup(), "rule__Composite__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
					put(grammarAccess.getConnectorAccess().getGroup(), "rule__Connector__Group__0");
					put(grammarAccess.getDashboardAccess().getGroup(), "rule__Dashboard__Group__0");
					put(grammarAccess.getFqnAccess().getGroup(), "rule__Fqn__Group__0");
					put(grammarAccess.getFqnAccess().getGroup_1(), "rule__Fqn__Group_1__0");
					put(grammarAccess.getModelAccess().getElementsAssignment_0(), "rule__Model__ElementsAssignment_0");
					put(grammarAccess.getModelAccess().getElementsAssignment_1(), "rule__Model__ElementsAssignment_1");
					put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
					put(grammarAccess.getSensorAccess().getPortsAssignment_3_0(), "rule__Sensor__PortsAssignment_3_0");
					put(grammarAccess.getSensorAccess().getSensorUrlAssignment_3_1_1(), "rule__Sensor__SensorUrlAssignment_3_1_1");
					put(grammarAccess.getWidgetAccess().getNameAssignment_1(), "rule__Widget__NameAssignment_1");
					put(grammarAccess.getWidgetAccess().getPortsAssignment_3_0(), "rule__Widget__PortsAssignment_3_0");
					put(grammarAccess.getWidgetAccess().getPatternAssignment_3_1_1(), "rule__Widget__PatternAssignment_3_1_1");
					put(grammarAccess.getInPortAccess().getNameAssignment_1(), "rule__InPort__NameAssignment_1");
					put(grammarAccess.getInPortAccess().getPortTypeAssignment_3_0_1(), "rule__InPort__PortTypeAssignment_3_0_1");
					put(grammarAccess.getInPortAccess().getPortEncodingAssignment_3_1_1(), "rule__InPort__PortEncodingAssignment_3_1_1");
					put(grammarAccess.getOutPortAccess().getNameAssignment_0(), "rule__OutPort__NameAssignment_0");
					put(grammarAccess.getOutPortAccess().getPortTypeAssignment_1_0_1(), "rule__OutPort__PortTypeAssignment_1_0_1");
					put(grammarAccess.getOutPortAccess().getPortEncodingAssignment_1_1_1(), "rule__OutPort__PortEncodingAssignment_1_1_1");
					put(grammarAccess.getCompositeAccess().getNameAssignment_1(), "rule__Composite__NameAssignment_1");
					put(grammarAccess.getCompositeAccess().getInstancesAssignment_3(), "rule__Composite__InstancesAssignment_3");
					put(grammarAccess.getCompositeAccess().getConnectorsAssignment_4(), "rule__Composite__ConnectorsAssignment_4");
					put(grammarAccess.getInstanceAccess().getNameAssignment_0(), "rule__Instance__NameAssignment_0");
					put(grammarAccess.getInstanceAccess().getTypeAssignment_2(), "rule__Instance__TypeAssignment_2");
					put(grammarAccess.getConnectorAccess().getSourceAssignment_0(), "rule__Connector__SourceAssignment_0");
					put(grammarAccess.getConnectorAccess().getTargetAssignment_2(), "rule__Connector__TargetAssignment_2");
					put(grammarAccess.getConnectorAccess().getPortAssignment_4(), "rule__Connector__PortAssignment_4");
					put(grammarAccess.getDashboardAccess().getNameAssignment_0(), "rule__Dashboard__NameAssignment_0");
					put(grammarAccess.getDashboardAccess().getInstancesAssignment_2(), "rule__Dashboard__InstancesAssignment_2");
					put(grammarAccess.getDashboardAccess().getConnectorsAssignment_3(), "rule__Dashboard__ConnectorsAssignment_3");
					put(grammarAccess.getSensorAccess().getUnorderedGroup_3(), "rule__Sensor__UnorderedGroup_3");
					put(grammarAccess.getWidgetAccess().getUnorderedGroup_3(), "rule__Widget__UnorderedGroup_3");
					put(grammarAccess.getInPortAccess().getUnorderedGroup_3(), "rule__InPort__UnorderedGroup_3");
					put(grammarAccess.getOutPortAccess().getUnorderedGroup_1(), "rule__OutPort__UnorderedGroup_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal.InternalCaPtahParser typedParser = (fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal.InternalCaPtahParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CaPtahGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CaPtahGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
