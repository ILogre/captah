/*
* generated by Xtext
*/
grammar InternalCaPtah;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.uns.i3s.rainbow.captah.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.uns.i3s.rainbow.captah.dsl.services.CaPtahGrammarAccess;

}

@parser::members {
 
 	private CaPtahGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CaPtahGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponent
entryRuleComponent 
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentAccess().getAlternatives()); }
(rule__Component__Alternatives)
{ after(grammarAccess.getComponentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSensor
entryRuleSensor 
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSensorAccess().getGroup()); }
(rule__Sensor__Group__0)
{ after(grammarAccess.getSensorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWidget
entryRuleWidget 
:
{ before(grammarAccess.getWidgetRule()); }
	 ruleWidget
{ after(grammarAccess.getWidgetRule()); } 
	 EOF 
;

// Rule Widget
ruleWidget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWidgetAccess().getGroup()); }
(rule__Widget__Group__0)
{ after(grammarAccess.getWidgetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInPort
entryRuleInPort 
:
{ before(grammarAccess.getInPortRule()); }
	 ruleInPort
{ after(grammarAccess.getInPortRule()); } 
	 EOF 
;

// Rule InPort
ruleInPort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInPortAccess().getGroup()); }
(rule__InPort__Group__0)
{ after(grammarAccess.getInPortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutPort
entryRuleOutPort 
:
{ before(grammarAccess.getOutPortRule()); }
	 ruleOutPort
{ after(grammarAccess.getOutPortRule()); } 
	 EOF 
;

// Rule OutPort
ruleOutPort
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutPortAccess().getGroup()); }
(rule__OutPort__Group__0)
{ after(grammarAccess.getOutPortAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComposite
entryRuleComposite 
:
{ before(grammarAccess.getCompositeRule()); }
	 ruleComposite
{ after(grammarAccess.getCompositeRule()); } 
	 EOF 
;

// Rule Composite
ruleComposite
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositeAccess().getGroup()); }
(rule__Composite__Group__0)
{ after(grammarAccess.getCompositeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstance
entryRuleInstance 
:
{ before(grammarAccess.getInstanceRule()); }
	 ruleInstance
{ after(grammarAccess.getInstanceRule()); } 
	 EOF 
;

// Rule Instance
ruleInstance
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstanceAccess().getGroup()); }
(rule__Instance__Group__0)
{ after(grammarAccess.getInstanceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConnector
entryRuleConnector 
:
{ before(grammarAccess.getConnectorRule()); }
	 ruleConnector
{ after(grammarAccess.getConnectorRule()); } 
	 EOF 
;

// Rule Connector
ruleConnector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConnectorAccess().getGroup()); }
(rule__Connector__Group__0)
{ after(grammarAccess.getConnectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDashboard
entryRuleDashboard 
:
{ before(grammarAccess.getDashboardRule()); }
	 ruleDashboard
{ after(grammarAccess.getDashboardRule()); } 
	 EOF 
;

// Rule Dashboard
ruleDashboard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDashboardAccess().getGroup()); }
(rule__Dashboard__Group__0)
{ after(grammarAccess.getDashboardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFqn
entryRuleFqn 
:
{ before(grammarAccess.getFqnRule()); }
	 ruleFqn
{ after(grammarAccess.getFqnRule()); } 
	 EOF 
;

// Rule Fqn
ruleFqn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFqnAccess().getGroup()); }
(rule__Fqn__Group__0)
{ after(grammarAccess.getFqnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule SensorType
ruleSensorType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorTypeAccess().getAlternatives()); }
(rule__SensorType__Alternatives)
{ after(grammarAccess.getSensorTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DataEncoding
ruleDataEncoding
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataEncodingAccess().getAlternatives()); }
(rule__DataEncoding__Alternatives)
{ after(grammarAccess.getDataEncodingAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Component__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getSensorParserRuleCall_0()); }
	ruleSensor
{ after(grammarAccess.getComponentAccess().getSensorParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComponentAccess().getWidgetParserRuleCall_1()); }
	ruleWidget
{ after(grammarAccess.getComponentAccess().getWidgetParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComponentAccess().getCompositeParserRuleCall_2()); }
	ruleComposite
{ after(grammarAccess.getComponentAccess().getCompositeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getIsAKeyword_1_0()); }

	'isA' 

{ after(grammarAccess.getInstanceAccess().getIsAKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getInstanceAccess().getIsAnKeyword_1_1()); }

	'isAn' 

{ after(grammarAccess.getInstanceAccess().getIsAnKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorTypeAccess().getNUMERICAL_TEnumLiteralDeclaration_0()); }
(	'Numerical' 
)
{ after(grammarAccess.getSensorTypeAccess().getNUMERICAL_TEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSensorTypeAccess().getBOOLEAN_TEnumLiteralDeclaration_1()); }
(	'Boolean' 
)
{ after(grammarAccess.getSensorTypeAccess().getBOOLEAN_TEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getSensorTypeAccess().getSTRING_TEnumLiteralDeclaration_2()); }
(	'String' 
)
{ after(grammarAccess.getSensorTypeAccess().getSTRING_TEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataEncoding__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataEncodingAccess().getCSVEnumLiteralDeclaration_0()); }
(	'CSV' 
)
{ after(grammarAccess.getDataEncodingAccess().getCSVEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDataEncodingAccess().getSENMLEnumLiteralDeclaration_1()); }
(	'SenML' 
)
{ after(grammarAccess.getDataEncodingAccess().getSENMLEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsAssignment_0()); }
(rule__Model__ElementsAssignment_0)*
{ after(grammarAccess.getModelAccess().getElementsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsAssignment_1()); }
(rule__Model__ElementsAssignment_1)
{ after(grammarAccess.getModelAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sensor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getSensorKeyword_0()); }

	'sensor' 

{ after(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getNameAssignment_1()); }
(rule__Sensor__NameAssignment_1)
{ after(grammarAccess.getSensorAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group__2__Impl
	rule__Sensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getSensorAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getUnorderedGroup_3()); }
(rule__Sensor__UnorderedGroup_3)
{ after(grammarAccess.getSensorAccess().getUnorderedGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Sensor__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group_3_1__0__Impl
	rule__Sensor__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getIsProvidedByKeyword_3_1_0()); }

	'isProvidedBy' 

{ after(grammarAccess.getSensorAccess().getIsProvidedByKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getSensorUrlAssignment_3_1_1()); }
(rule__Sensor__SensorUrlAssignment_3_1_1)
{ after(grammarAccess.getSensorAccess().getSensorUrlAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Widget__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__Group__0__Impl
	rule__Widget__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getWidgetKeyword_0()); }

	'widget' 

{ after(grammarAccess.getWidgetAccess().getWidgetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Widget__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__Group__1__Impl
	rule__Widget__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getNameAssignment_1()); }
(rule__Widget__NameAssignment_1)
{ after(grammarAccess.getWidgetAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Widget__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__Group__2__Impl
	rule__Widget__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getWidgetAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Widget__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getUnorderedGroup_3()); }
(rule__Widget__UnorderedGroup_3)
{ after(grammarAccess.getWidgetAccess().getUnorderedGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Widget__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__Group_3_1__0__Impl
	rule__Widget__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getIsImplementedByKeyword_3_1_0()); }

	'isImplementedBy' 

{ after(grammarAccess.getWidgetAccess().getIsImplementedByKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Widget__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getPatternAssignment_3_1_1()); }
(rule__Widget__PatternAssignment_3_1_1)
{ after(grammarAccess.getWidgetAccess().getPatternAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InPort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group__0__Impl
	rule__InPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getInputKeyword_0()); }

	'input' 

{ after(grammarAccess.getInPortAccess().getInputKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InPort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group__1__Impl
	rule__InPort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getNameAssignment_1()); }
(rule__InPort__NameAssignment_1)
{ after(grammarAccess.getInPortAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InPort__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group__2__Impl
	rule__InPort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getInPortAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InPort__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getUnorderedGroup_3()); }
(rule__InPort__UnorderedGroup_3)
{ after(grammarAccess.getInPortAccess().getUnorderedGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InPort__Group_3_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group_3_0__0__Impl
	rule__InPort__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group_3_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getHasForTypeKeyword_3_0_0()); }

	'hasForType' 

{ after(grammarAccess.getInPortAccess().getHasForTypeKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InPort__Group_3_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group_3_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getPortTypeAssignment_3_0_1()); }
(rule__InPort__PortTypeAssignment_3_0_1)
{ after(grammarAccess.getInPortAccess().getPortTypeAssignment_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InPort__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group_3_1__0__Impl
	rule__InPort__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getExpectsAsEncodingKeyword_3_1_0()); }

	'expectsAsEncoding' 

{ after(grammarAccess.getInPortAccess().getExpectsAsEncodingKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InPort__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getPortEncodingAssignment_3_1_1()); }
(rule__InPort__PortEncodingAssignment_3_1_1)
{ after(grammarAccess.getInPortAccess().getPortEncodingAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutPort__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__Group__0__Impl
	rule__OutPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getNameAssignment_0()); }
(rule__OutPort__NameAssignment_0)
{ after(grammarAccess.getOutPortAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutPort__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getUnorderedGroup_1()); }
(rule__OutPort__UnorderedGroup_1)
{ after(grammarAccess.getOutPortAccess().getUnorderedGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutPort__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__Group_1_0__0__Impl
	rule__OutPort__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getHasForTypeKeyword_1_0_0()); }

	'hasForType' 

{ after(grammarAccess.getOutPortAccess().getHasForTypeKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutPort__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getPortTypeAssignment_1_0_1()); }
(rule__OutPort__PortTypeAssignment_1_0_1)
{ after(grammarAccess.getOutPortAccess().getPortTypeAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutPort__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__Group_1_1__0__Impl
	rule__OutPort__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getIsEncodedAsKeyword_1_1_0()); }

	'isEncodedAs' 

{ after(grammarAccess.getOutPortAccess().getIsEncodedAsKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutPort__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getPortEncodingAssignment_1_1_1()); }
(rule__OutPort__PortEncodingAssignment_1_1_1)
{ after(grammarAccess.getOutPortAccess().getPortEncodingAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Composite__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Composite__Group__0__Impl
	rule__Composite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getCompositeKeyword_0()); }

	'composite' 

{ after(grammarAccess.getCompositeAccess().getCompositeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Composite__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Composite__Group__1__Impl
	rule__Composite__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getNameAssignment_1()); }
(rule__Composite__NameAssignment_1)
{ after(grammarAccess.getCompositeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Composite__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Composite__Group__2__Impl
	rule__Composite__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getCompositeAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Composite__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Composite__Group__3__Impl
	rule__Composite__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCompositeAccess().getInstancesAssignment_3()); }
(rule__Composite__InstancesAssignment_3)
{ after(grammarAccess.getCompositeAccess().getInstancesAssignment_3()); }
)
(
{ before(grammarAccess.getCompositeAccess().getInstancesAssignment_3()); }
(rule__Composite__InstancesAssignment_3)*
{ after(grammarAccess.getCompositeAccess().getInstancesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Composite__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Composite__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getConnectorsAssignment_4()); }
(rule__Composite__ConnectorsAssignment_4)*
{ after(grammarAccess.getCompositeAccess().getConnectorsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Instance__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__0__Impl
	rule__Instance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getNameAssignment_0()); }
(rule__Instance__NameAssignment_0)
{ after(grammarAccess.getInstanceAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__1__Impl
	rule__Instance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getAlternatives_1()); }
(rule__Instance__Alternatives_1)
{ after(grammarAccess.getInstanceAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getTypeAssignment_2()); }
(rule__Instance__TypeAssignment_2)
{ after(grammarAccess.getInstanceAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Connector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Connector__Group__0__Impl
	rule__Connector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getSourceAssignment_0()); }
(rule__Connector__SourceAssignment_0)
{ after(grammarAccess.getConnectorAccess().getSourceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Connector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Connector__Group__1__Impl
	rule__Connector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1()); }

	'<->' 

{ after(grammarAccess.getConnectorAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Connector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Connector__Group__2__Impl
	rule__Connector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getTargetAssignment_2()); }
(rule__Connector__TargetAssignment_2)
{ after(grammarAccess.getConnectorAccess().getTargetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Connector__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Connector__Group__3__Impl
	rule__Connector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getPlusSignKeyword_3()); }

	'+' 

{ after(grammarAccess.getConnectorAccess().getPlusSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Connector__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Connector__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getPortAssignment_4()); }
(rule__Connector__PortAssignment_4)
{ after(grammarAccess.getConnectorAccess().getPortAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Dashboard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dashboard__Group__0__Impl
	rule__Dashboard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashboardAccess().getNameAssignment_0()); }
(rule__Dashboard__NameAssignment_0)
{ after(grammarAccess.getDashboardAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dashboard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dashboard__Group__1__Impl
	rule__Dashboard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashboardAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getDashboardAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dashboard__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dashboard__Group__2__Impl
	rule__Dashboard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDashboardAccess().getInstancesAssignment_2()); }
(rule__Dashboard__InstancesAssignment_2)
{ after(grammarAccess.getDashboardAccess().getInstancesAssignment_2()); }
)
(
{ before(grammarAccess.getDashboardAccess().getInstancesAssignment_2()); }
(rule__Dashboard__InstancesAssignment_2)*
{ after(grammarAccess.getDashboardAccess().getInstancesAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dashboard__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dashboard__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashboardAccess().getConnectorsAssignment_3()); }
(rule__Dashboard__ConnectorsAssignment_3)*
{ after(grammarAccess.getDashboardAccess().getConnectorsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Fqn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fqn__Group__0__Impl
	rule__Fqn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fqn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFqnAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFqnAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fqn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fqn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fqn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFqnAccess().getGroup_1()); }
(rule__Fqn__Group_1__0)*
{ after(grammarAccess.getFqnAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fqn__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fqn__Group_1__0__Impl
	rule__Fqn__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fqn__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFqnAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFqnAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fqn__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fqn__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fqn__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFqnAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFqnAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Sensor__UnorderedGroup_3
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getSensorAccess().getUnorderedGroup_3());
    }
:
	rule__Sensor__UnorderedGroup_3__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getSensorAccess().getUnorderedGroup_3())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getSensorAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__Sensor__UnorderedGroup_3__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSensorAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSensorAccess().getUnorderedGroup_3(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getSensorAccess().getPortsAssignment_3_0()); }
						(rule__Sensor__PortsAssignment_3_0)
						{ after(grammarAccess.getSensorAccess().getPortsAssignment_3_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSensorAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSensorAccess().getUnorderedGroup_3(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getSensorAccess().getGroup_3_1()); }
						(rule__Sensor__Group_3_1__0)
						{ after(grammarAccess.getSensorAccess().getGroup_3_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSensorAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__Sensor__UnorderedGroup_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__UnorderedGroup_3__Impl
	rule__Sensor__UnorderedGroup_3__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__UnorderedGroup_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensor__UnorderedGroup_3__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Widget__UnorderedGroup_3
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getWidgetAccess().getUnorderedGroup_3());
    }
:
	rule__Widget__UnorderedGroup_3__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getWidgetAccess().getUnorderedGroup_3())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getWidgetAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__Widget__UnorderedGroup_3__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getWidgetAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getWidgetAccess().getUnorderedGroup_3(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					(
						{ before(grammarAccess.getWidgetAccess().getPortsAssignment_3_0()); }
						(rule__Widget__PortsAssignment_3_0)
						{ after(grammarAccess.getWidgetAccess().getPortsAssignment_3_0()); }
					)
					(
						{ before(grammarAccess.getWidgetAccess().getPortsAssignment_3_0()); }
						((rule__Widget__PortsAssignment_3_0)=>rule__Widget__PortsAssignment_3_0)*
						{ after(grammarAccess.getWidgetAccess().getPortsAssignment_3_0()); }
					)					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getWidgetAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getWidgetAccess().getUnorderedGroup_3(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getWidgetAccess().getGroup_3_1()); }
						(rule__Widget__Group_3_1__0)
						{ after(grammarAccess.getWidgetAccess().getGroup_3_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWidgetAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__Widget__UnorderedGroup_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__UnorderedGroup_3__Impl
	rule__Widget__UnorderedGroup_3__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Widget__UnorderedGroup_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Widget__UnorderedGroup_3__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__InPort__UnorderedGroup_3
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getInPortAccess().getUnorderedGroup_3());
    }
:
	rule__InPort__UnorderedGroup_3__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getInPortAccess().getUnorderedGroup_3())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getInPortAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__InPort__UnorderedGroup_3__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInPortAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInPortAccess().getUnorderedGroup_3(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getInPortAccess().getGroup_3_0()); }
						(rule__InPort__Group_3_0__0)
						{ after(grammarAccess.getInPortAccess().getGroup_3_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInPortAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInPortAccess().getUnorderedGroup_3(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getInPortAccess().getGroup_3_1()); }
						(rule__InPort__Group_3_1__0)
						{ after(grammarAccess.getInPortAccess().getGroup_3_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInPortAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__InPort__UnorderedGroup_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__UnorderedGroup_3__Impl
	rule__InPort__UnorderedGroup_3__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__InPort__UnorderedGroup_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InPort__UnorderedGroup_3__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__OutPort__UnorderedGroup_1
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getOutPortAccess().getUnorderedGroup_1());
    }
:
	rule__OutPort__UnorderedGroup_1__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getOutPortAccess().getUnorderedGroup_1())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getOutPortAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}


rule__OutPort__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOutPortAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getOutPortAccess().getUnorderedGroup_1(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getOutPortAccess().getGroup_1_0()); }
						(rule__OutPort__Group_1_0__0)
						{ after(grammarAccess.getOutPortAccess().getGroup_1_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getOutPortAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getOutPortAccess().getUnorderedGroup_1(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getOutPortAccess().getGroup_1_1()); }
						(rule__OutPort__Group_1_1__0)
						{ after(grammarAccess.getOutPortAccess().getGroup_1_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOutPortAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}


rule__OutPort__UnorderedGroup_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__UnorderedGroup_1__Impl
	rule__OutPort__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__OutPort__UnorderedGroup_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutPort__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__Model__ElementsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsComponentParserRuleCall_0_0()); }
	ruleComponent{ after(grammarAccess.getModelAccess().getElementsComponentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getElementsDashboardParserRuleCall_1_0()); }
	ruleDashboard{ after(grammarAccess.getModelAccess().getElementsDashboardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__PortsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getPortsOutPortParserRuleCall_3_0_0()); }
	ruleOutPort{ after(grammarAccess.getSensorAccess().getPortsOutPortParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensorUrlAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensorAccess().getSensorUrlSTRINGTerminalRuleCall_3_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getSensorAccess().getSensorUrlSTRINGTerminalRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getWidgetAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__PortsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getPortsInPortParserRuleCall_3_0_0()); }
	ruleInPort{ after(grammarAccess.getWidgetAccess().getPortsInPortParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Widget__PatternAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWidgetAccess().getPatternSTRINGTerminalRuleCall_3_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getWidgetAccess().getPatternSTRINGTerminalRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInPortAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__PortTypeAssignment_3_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getPortTypeSensorTypeEnumRuleCall_3_0_1_0()); }
	ruleSensorType{ after(grammarAccess.getInPortAccess().getPortTypeSensorTypeEnumRuleCall_3_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InPort__PortEncodingAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInPortAccess().getPortEncodingDataEncodingEnumRuleCall_3_1_1_0()); }
	ruleDataEncoding{ after(grammarAccess.getInPortAccess().getPortEncodingDataEncodingEnumRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getNameOutputKeyword_0_0()); }
(
{ before(grammarAccess.getOutPortAccess().getNameOutputKeyword_0_0()); }

	'output' 

{ after(grammarAccess.getOutPortAccess().getNameOutputKeyword_0_0()); }
)

{ after(grammarAccess.getOutPortAccess().getNameOutputKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__PortTypeAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getPortTypeSensorTypeEnumRuleCall_1_0_1_0()); }
	ruleSensorType{ after(grammarAccess.getOutPortAccess().getPortTypeSensorTypeEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutPort__PortEncodingAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutPortAccess().getPortEncodingDataEncodingEnumRuleCall_1_1_1_0()); }
	ruleDataEncoding{ after(grammarAccess.getOutPortAccess().getPortEncodingDataEncodingEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCompositeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__InstancesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getInstancesInstanceParserRuleCall_3_0()); }
	ruleInstance{ after(grammarAccess.getCompositeAccess().getInstancesInstanceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Composite__ConnectorsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeAccess().getConnectorsConnectorParserRuleCall_4_0()); }
	ruleConnector{ after(grammarAccess.getCompositeAccess().getConnectorsConnectorParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstanceAccess().getTypeComponentCrossReference_2_0()); }
(
{ before(grammarAccess.getInstanceAccess().getTypeComponentIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getInstanceAccess().getTypeComponentIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getInstanceAccess().getTypeComponentCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__SourceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getSourceInstanceCrossReference_0_0()); }
(
{ before(grammarAccess.getConnectorAccess().getSourceInstanceIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getConnectorAccess().getSourceInstanceIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getConnectorAccess().getSourceInstanceCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__TargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getTargetInstanceCrossReference_2_0()); }
(
{ before(grammarAccess.getConnectorAccess().getTargetInstanceIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getConnectorAccess().getTargetInstanceIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getConnectorAccess().getTargetInstanceCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__PortAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConnectorAccess().getPortPortCrossReference_4_0()); }
(
{ before(grammarAccess.getConnectorAccess().getPortPortFqnParserRuleCall_4_0_1()); }
	ruleFqn{ after(grammarAccess.getConnectorAccess().getPortPortFqnParserRuleCall_4_0_1()); }
)
{ after(grammarAccess.getConnectorAccess().getPortPortCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashboardAccess().getNameDashboardKeyword_0_0()); }
(
{ before(grammarAccess.getDashboardAccess().getNameDashboardKeyword_0_0()); }

	'dashboard' 

{ after(grammarAccess.getDashboardAccess().getNameDashboardKeyword_0_0()); }
)

{ after(grammarAccess.getDashboardAccess().getNameDashboardKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__InstancesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashboardAccess().getInstancesInstanceParserRuleCall_2_0()); }
	ruleInstance{ after(grammarAccess.getDashboardAccess().getInstancesInstanceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dashboard__ConnectorsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDashboardAccess().getConnectorsConnectorParserRuleCall_3_0()); }
	ruleConnector{ after(grammarAccess.getDashboardAccess().getConnectorsConnectorParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


